// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ—Ä—ã–≤–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞.
function addBreakPeriod(start = "", end = "") {
    const container = document.getElementById("break-periods-container");

    const row = document.createElement("div");
    row.className = "d-flex align-items-center gap-2 mb-2 break-row";

    row.innerHTML = `
        <input type="time" class="form-control break-start" value="${start}">
        <span>–¥–æ</span>
        <input type="time" class="form-control break-end" value="${end}">
        <button type="button" class="btn btn-sm btn-outline-danger remove-break-btn">&times;</button>
    `;

    container.appendChild(row);
}

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
document.getElementById('add-break-btn')
    .addEventListener('click', () => addBreakPeriod());

// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
document.getElementById('break-periods-container').addEventListener('click', function (e) {
    if (e.target.classList.contains('remove-break-btn')) {
        e.target.closest('.break-row').remove();
    }
});

// –ü—Ä–∏ —Å–∞–±–º–∏—Ç–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
document.querySelector('form').addEventListener('submit', function (e) {
    console.log("üìù –°–∞–±–º–∏—Ç —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏");
    const out = [];
    document.querySelectorAll('#break-periods-container .break-row').forEach(row => {
        const s = row.querySelector('.break-start').value;
        const e = row.querySelector('.break-end').value;
        if (s && e) out.push(`${s}-${e}`);
    });

    console.log("üïí –ü–µ—Ä–µ—Ä—ã–≤—ã —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω—ã:", out);
    document.getElementById('id_break_periods').value = JSON.stringify(out);
});


// –°—á–∏—Ç—ã–≤–∞–µ—Ç –∏–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ <input id="id_break_periods"> JSON-–º–∞—Å—Å–∏–≤ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö –Ω–∞ —Ñ–æ—Ä–º–µ.
function initDatepickers() {
    // flatpickr –¥–ª—è –¥–∞—Ç
    const datePickerConfig = {
        locale: "ru",
        dateFormat: "Y-m-d",
        altInput: true,
        altFormat: "d.m.Y",
        allowInput: true,
        onChange: function (selectedDates, dateStr, instance) {
            instance.input.classList.toggle('is-invalid', selectedDates.length === 0);
        }
    };

    flatpickr("#id_date_start", datePickerConfig);
    flatpickr("#id_date_end", datePickerConfig);

}
        
// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è ¬´–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π¬ª —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º
function formatPersonal(option) {
    if (!option.id) {
    return option.text; 
    }
    const fullName    = option.text;
    const department = $(option.element).data('department') || '';
    return $(`
    <div>
        <div><strong>${department}</strong></div>
        <small class="text-muted">${fullName}</small>
    </div>
    `);
}

// 2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Select2 –Ω–∞ –Ω–∞—à–µ–º —Å–µ–ª–µ–∫—Ç–µ
$('.change-responsible').select2({
    theme: 'bootstrap-5',
    placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ',
    allowClear: false,
    width: 'resolve',
    templateResult: formatPersonal,
    templateSelection: formatPersonal,
    escapeMarkup: m => m
});

// Select2 –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
$('.change-customer').select2({
    theme: 'bootstrap-5',
    placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞',
    width: 'resolve',
    templateResult: formatPersonal,
    templateSelection: formatPersonal,
    escapeMarkup: m => m
});

// 3) AJAX‚Äë–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
$('.change-responsible').on('change', function() {
    const $sel          = $(this),
        requestId    = $sel.data('id'),
        responsibleId= $sel.val();

    // –µ—Å–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É (–Ω–µ—Ç ID) ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º—Å—è
    if (!requestId) return;

    fetch("{% url 'update_responsible' %}", {
    method: "POST",
    headers: {
        'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({
        request_id:     requestId,
        responsible_id: responsibleId
    })
    })
    .then(r => {
        console.log("üì• –û—Ç–≤–µ—Ç –æ—Ç update_responsible:", r.status);
        return r.json();
    })
    .then(js => {
        console.log("üì• JSON-–æ—Ç–≤–µ—Ç:", js);
        if (!js.success) {
            alert('–û—à–∏–±–∫–∞: ' + js.error);
        }
    })
    .catch(err => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ fetch:", err);
    });
});

document.addEventListener("DOMContentLoaded", function () {
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    const startInput = document.getElementById("id_time_start");
    const endInput = document.getElementById("id_time_end");
    const output = document.getElementById("timeDifference"); 

    const LIFTING_CODE = 'lifting';
    const categorySelect = document.getElementById('id_equipment_category');
    const liftingBlock = document.getElementById('liftingFields');

    const modalEl = document.getElementById('addProfileModal');
    if (!modalEl) {
        // –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –º–æ–¥–∞–ª–∫–∏ ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        return;
    }
    const errorsBox = modalEl.querySelector('.all-errors-container');
    const form = document.getElementById('addProfileForm');
    const respSelect = $('#id_responsible');
    const addUrl = modalEl.dataset.addResponsibleUrl;

    const phoneField = document.getElementById('profilePhone');

    if (!modalEl) {
        // –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –º–æ–¥–∞–ª–∫–∏ ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        return;
    }

    // –ú–∞—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ +7-999-999-99-99
    if (phoneField) {
        $('#profilePhone').inputmask({
            mask: '+7-999-999-99-99',
            placeholder: '_',
            showMaskOnHover: false,
            autoUnmask: false,
            clearIncomplete: true
        });
    }

    // Select2 –¥–ª—è department –≤ –º–æ–¥–∞–ª–∫–µ
    $('#profileDepartment').select2({
        placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ',
        dropdownParent: modalEl,
        width: '100%',
        theme: 'default',
        templateResult: formatOption, 
        templateSelection: formatOption 
    });

    $('#profileLocation').select2({
        placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é',
        dropdownParent: $('#addProfileModal'),
        width: '100%',
        theme: 'default'
    });

    function formatOption(option) {
        if (!option.id) return option.text;
        return $(`<span style="color: white;">${option.text}</span>`);
    }

    if (form){
            form.addEventListener('submit', e => {
                e.preventDefault();
                errorsBox.innerHTML = '';

                const data = {
                    last_name: form.elements['last_name'].value.trim(),
                    first_name: form.elements['first_name'].value.trim(),
                    middle_name: form.elements['middle_name'].value.trim(),
                    position: form.elements['position'].value.trim(),
                    phone: $('#profilePhone').val(),
                    birth_date: form.elements['birth_date'].value,
                    department: form.elements['department'].value,
                    location: form.elements['location'].value,
                    csrfmiddlewaretoken: form.querySelector('[name=csrfmiddlewaretoken]').value
                };


            // –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            const required = [
                { val: data.last_name,  name: '–§–∞–º–∏–ª–∏—è' },
                { val: data.first_name, name: '–ò–º—è' },
                { val: data.position,   name: '–î–æ–ª–∂–Ω–æ—Å—Ç—å' },
                { val: data.phone,      name: '–¢–µ–ª–µ—Ñ–æ–Ω' },
                { val: data.department, name: '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ' },
                { val: data.location,   name: '–õ–æ–∫–∞—Ü–∏—è' }
            ];
            // console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ AJAX-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ", data);
            let ok = true;
            required.forEach(f => {
                if (!f.val) {
                    ok = false;
                    errorsBox.insertAdjacentHTML('beforeend',
                        `<div class="all-error-message">–ü–æ–ª–µ ¬´${f.name}¬ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ</div>`);
                }
            });
            if (!ok) return;

            // AJAX POST
            $.post(addUrl, data)
            .done(res => {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ Select2
                const opt = new Option(res.full_name, res.profile_id, true, true);
                $(opt).attr('data-department', res.department_display);
                respSelect.append(opt).trigger('change');
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º
                form.reset();
                $('#profileDepartment,#profileLocation').val(null).trigger('change');
                bootstrap.Modal.getInstance(modalEl).hide();
            })
            .fail(xhr => {
                try {
                    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ:", xhr);
                    const response = JSON.parse(xhr.responseText);
                    if (response.errors) {
                        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
                        errorsBox.innerHTML = '';
                        $('.is-invalid').removeClass('is-invalid');
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –ø–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
                        Object.keys(response.errors).forEach(field => {
                            const errors = response.errors[field];
                            const inputField = $(`#profile${field.charAt(0).toUpperCase() + field.slice(1)}`);
                            let errorContainer;
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫
                            const inputGroup = inputField.closest('.input-group');
                            errorContainer = inputGroup.find('.invalid-feedback');
                            
                            if (errorContainer.length) {
                                // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫ –Ω–∞–π–¥–µ–Ω
                                errorContainer.html(errors.join('<br>')).show();
                                inputField.addClass('is-invalid');
                            } else {
                                // –ò–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—à–∏–±–æ–∫
                                errors.forEach(error => {
                                    const errorBox = document.createElement('div');
                                    errorBox.className = 'all-error-message';
                                    errorBox.innerHTML = `<strong>${inputGroup.find('label').text().replace('*', '')}:</strong> ${error}`;
                                    errorsBox.appendChild(errorBox);
                                });
                            }
                        });
                    }
                } catch (e) {
                    errorsBox.innerHTML = `<div class="all-error-message">–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö</div>`;
                }
            });
        });

    }else{
        console.error("–§–æ—Ä–º–∞ addProfileForm –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        return;
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    modalEl.addEventListener('hidden.bs.modal', () => {
        errorsBox.innerHTML = '';
        form.reset();                     // —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç
        $('#profileDepartment,#profileLocation').val(null).trigger('change');
    });


    function toggleLiftingFields() {
        if (!categorySelect || !liftingBlock) return;
        
        const selectedOption = categorySelect.options[categorySelect.selectedIndex];
        const code = selectedOption.dataset.code;
        
        if (code === LIFTING_CODE) {
            liftingBlock.style.display = 'block';
        } else {
            liftingBlock.style.display = 'none';
        }
    }

    if (categorySelect) {
        categorySelect.addEventListener('change', toggleLiftingFields);
        toggleLiftingFields(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    }

    function calculateTimeDifference() {
        if (!startInput || !endInput || !output) return;

        const start = startInput.value;
        const end = endInput.value;

        if (!start || !end) {
            output.textContent = "‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏): ‚Äî";
            return;
        }

        const [startH, startM] = start.split(":").map(Number);
        const [endH, endM] = end.split(":").map(Number);

        const startMinutes = startH * 60 + startM;
        const endMinutes = endH * 60 + endM;

        const diff = endMinutes - startMinutes;

        if (diff <= 0) {
            output.textContent = "‚è± –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞";
            return;
        }

        const hours = Math.floor(diff / 60);
        const minutes = diff % 60;

        output.textContent = `‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏): ${hours} —á ${minutes} –º–∏–Ω`;
    }

    // –°–æ–±—ã—Ç–∏—è –≤—Ä–µ–º–µ–Ω–∏
    if (startInput && endInput) {
        startInput.addEventListener("change", calculateTimeDifference);
        endInput.addEventListener("change", calculateTimeDifference);
        calculateTimeDifference();
    }

    let existing = [];
    try {
        const raw = document.getElementById('id_break_periods').value;
        if (raw) existing = JSON.parse(raw); // ["03:30-03:04", "16:30-16:00"]
    } catch (e) {}

    existing.forEach(str => {
        if (typeof str === "string" && str.includes("-")) {
            const [start, end] = str.split("-");
            addBreakPeriod(start, end);
        }
    });
    initDatepickers();
});
